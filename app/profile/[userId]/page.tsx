// app/profile/[userId]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { ProfileHeader } from '@/components/profile/ProfileHeader';
import { PostGrid } from '@/components/profile/PostGrid';
import { PostModal } from '@/components/profile/PostModal';

import { useUserProfile, UserProfile } from '@/hooks/useUserProfile';
import { useUserPosts, UserPost } from '@/hooks/useUserPosts';

import { Spinner, Button } from '@nextui-org/react';
import { useSelector } from 'react-redux';
import { RootState } from '../../store'; // Doƒüru yolu qeyd edin
import { useRouter } from 'next/navigation';


export default function OtherUserProfilePage({ params }: { params: { userId: string } }) {
  const router = useRouter();
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
  const userToken = useSelector((state: RootState) => state.auth.token);
  const currentUser = useSelector((state: RootState) => state.auth.user);

  const profileUserId = params.userId;

  const [selectedPost, setSelectedPost] = useState<UserPost | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);

  // useUserProfile hook-u URL-d…ôki `profileUserId`-d…ôn istifad…ô etsin
  const { user, loading: userLoading, error: userError, refetch: refetchUser } = useUserProfile({
    userId: profileUserId,
    enabled: isAuthenticated && !!userToken && !!profileUserId
  });

  // useUserPosts hook-unu da URL-d…ôki `profileUserId`-d…ôn istifad…ô etsin
  // Gƒ∞ZLƒ∞ PROFƒ∞L M∆èNTƒ∞Qƒ∞ √ú√á√úN isPrivate v…ô followStatus √∂t√ºr√ºl√ºr
  const { posts, loading: postsLoading, error: postsError, refetch: refetchPosts, hasMore } = useUserPosts({
    userId: profileUserId,
    page: currentPage,
    limit: 10,
    enabled: isAuthenticated && !!userToken && !!profileUserId,
    isPrivate: user?.isPrivate, // BURADA user obyektind…ôn isPrivate √∂t√ºr√ºl√ºr
    followStatus: user?.followStatus // BURADA user obyektind…ôn followStatus √∂t√ºr√ºl√ºr
  });

  useEffect(() => {
    if (!isAuthenticated && !userToken && !userLoading && !postsLoading) {
      router.push('/login');
    }
  }, [isAuthenticated, userToken, userLoading, postsLoading, router]);

  // `profileUserId` d…ôyi≈üdikd…ô post s…ôhif…ôsini sƒ±fƒ±rla v…ô postlarƒ± sƒ±fƒ±rla
  useEffect(() => {
    setCurrentPage(0);
    // useUserPosts hook-u √∂z√º userId, isPrivate, followStatus d…ôyi≈ü…ônd…ô daxili post state-ini sƒ±fƒ±rlayƒ±r.
    // Lakin, …ômin olmaq √º√ß√ºn refetchPosts() da √ßaƒüƒ±rƒ±la bil…ôr.
  }, [profileUserId]);


  const handlePostClick = (post: UserPost) => {
    setSelectedPost(post);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setSelectedPost(null);
    setIsModalOpen(false);
  };

  const handleLoadMore = () => {
    if (hasMore && !postsLoading && !postsError) { // X…ôta yoxdursa v…ô daha √ßox varsa y√ºkl…ô
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const handleFollowToggle = () => {
    console.log("Follow/Unfollow action for user:", user?.id);
    // Buraya API √ßaƒüƒ±rƒ±≈üƒ± g…ôl…ôc…ôk (izl…ôm…ô/izl…ôm…ôd…ôn √ßƒ±xma)
    // M…ôs…ôl…ôn: dispatch(followUser(user.id));
    // Sonra refetchUser() il…ô profili yenil…ôyin ki, `followStatus` d…ôyi≈üikliyi g√∂r√ºns√ºn.
    // H…ôm√ßinin, refetchPosts() da √ßaƒüƒ±rƒ±la bil…ôr ki, postlar yenid…ôn y√ºkl…ônsin (…ôg…ôr gizlidirs…ô a√ßƒ±lsa).
  };

  const handleEditProfile = () => {
    console.log("Edit Profile action.");
    // Dig…ôr istifad…ô√ßinin profilind…ô redakt…ô d√ºym…ôsi olmaz
  };

  if (userLoading) { // postsLoading-i buradan √ßƒ±xardƒ±m, √ß√ºnki useUserPosts √∂z daxilind…ô gizli profil √º√ß√ºn loading-i tez bitir…ô bil…ôr.
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" />
        <p className="ml-2 text-default-500">Profil y√ºkl…ônir...</p>
      </div>
    );
  }

  if (userError || !user) {
    return (
      <div className="flex flex-col justify-center items-center h-screen text-danger-500 p-4">
        <p>{userError || "Profil m…ôlumatlarƒ± tapƒ±lmadƒ± v…ô ya y√ºkl…ôn…ôrk…ôn x…ôta ba≈ü verdi."}</p>
        <Button onClick={refetchUser} color="primary" variant="flat" className="mt-4">Yenid…ôn c…ôhd et</Button>
      </div>
    );
  }

  const userWithPostsCount = {
    ...user,
    postsCount: posts.length, // √á…ôkil…ôn postlarƒ±n sayƒ±nƒ± …ôlav…ô edirik (bu `posts` artƒ±q d√ºzg√ºn g…ôl…ôn postlardƒ±r)
  };

  const isCurrentUser = !!currentUser && user.id === currentUser.id;

  return (
    <div className="container mx-auto p-4 max-w-5xl">
      <ProfileHeader
        user={userWithPostsCount}
        isCurrentUser={isCurrentUser}
        onFollowToggle={handleFollowToggle}
        onEditProfile={handleEditProfile}
      />
      <div className="mt-8">
        {postsLoading && posts.length === 0 && !postsError ? ( // postsError yoxdursa loading spinner g√∂st…ôr
          <div className="flex justify-center items-center h-48">
            <Spinner />
            <p className="ml-2 text-default-500">Postlar y√ºkl…ônir...</p>
          </div>
        ) : postsError ? (
          <div className="text-center text-danger-500 p-4">
            {/* ≈û…ôkild…ôki stil…ô uyƒüun olaraq mesajƒ± g√∂st…ôr */}
            {postsError === "This account is private. Follow to see their photos and videos." ? (
                <div className="flex flex-col items-center justify-center p-8 bg-gray-800 rounded-lg text-white">
                    <span className="text-6xl mb-4">üîí</span>
                    <h3 className="text-2xl font-bold mb-2">This account is private</h3>
                    <p className="text-gray-400">Follow to see their photos and videos.</p>
                </div>
            ) : (
                <>
                    <p>{postsError}</p>
                    <Button onClick={refetchPosts} color="primary" variant="flat" className="mt-4">Yenid…ôn c…ôhd et</Button>
                </>
            )}
          </div>
        ) : posts.length === 0 ? (
          <div className="text-center text-default-500 p-4">
            <p>H…ôl…ô he√ß bir post yoxdur.</p>
            {/* Dig…ôr istifad…ô√ßinin profilind…ô post payla≈ü d√ºym…ôsi olmaz */}
          </div>
        ) : (
          <>
            <PostGrid posts={posts} onPostClick={handlePostClick} />
            {hasMore && (
              <div className="flex justify-center mt-4">
                <Button onClick={handleLoadMore} isLoading={postsLoading} color="primary" variant="flat">
                  Daha √ßox y√ºkl…ô
                </Button>
              </div>
            )}
          </>
        )}
      </div>

      <PostModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        post={selectedPost}
        user={user}
      />
    </div>
  );
}